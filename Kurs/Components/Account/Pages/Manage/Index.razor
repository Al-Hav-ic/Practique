
@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Kurs.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-xl-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.UserName" id="Input.UserName" class="form-control" placeholder="Choose your new username" />
                <label for="Input.UserName" class="form-label">Username</label>
                <ValidationMessage For="() => Input.UserName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" id="Input.PhoneNumber" class="form-control" placeholder="Enter your phone number" />
                <label for="Input.PhoneNumber" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FullName" id="Input.FullName" class="form-control" placeholder="Enter your full name" />
                <label for="Input.FullName" class="form-label">Full Name</label>
                <ValidationMessage For="() => Input.FullName" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.UserName ??= user.UserName; // Load existing username if not provided
        Input.PhoneNumber ??= phoneNumber;
        Input.FullName ??= user.FullName; // Load full name
    }

    private async Task OnValidSubmitAsync()
    {
        // If the UserName is empty, use the existing one
        if (string.IsNullOrWhiteSpace(Input.UserName))
        {
            Input.UserName = user.UserName;
        }

        if (Input.UserName != user.UserName)
        {
            var setUserNameResult = await UserManager.SetUserNameAsync(user, Input.UserName);
            if (!setUserNameResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set username.", HttpContext);
                return;
            }
        }

        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
                return;
            }
        }

        if (Input.FullName != user.FullName)
        {
            user.FullName = Input.FullName;
            var setFullNameResult = await UserManager.UpdateAsync(user);
            if (!setFullNameResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set full name.", HttpContext);
                return;
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Display(Name = "Username")]
        public string UserName { get; set; } = "";

        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        [Required]
        [Display(Name = "Full Name")]
        public string? FullName { get; set; }
    }
}
