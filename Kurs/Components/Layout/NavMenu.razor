@using Kurs.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing



@implements IDisposable

@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Kurs</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/admin/dashboard">
                <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> ADa
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/organizer/dashboard">
                <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Oda
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/participant/dashboard">
                <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Pda
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="@homeUrl" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
       

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;
    private string homeUrl = "/";

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        await SetHomeUrlBasedOnRole();
    }

    private async Task SetHomeUrlBasedOnRole()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            using (var scope = ServiceProvider.CreateScope())
            {
                var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
                var appUser = await userManager.GetUserAsync(user);
                if (appUser != null)
                {
                    var roles = await userManager.GetRolesAsync(appUser);

                    if (roles.Contains("Admin"))
                    {
                        homeUrl = "/admin/dashboard";
                    }
                    else if (roles.Contains("Organiser"))
                    {
                        homeUrl = "/organizer/dashboard";
                    }
                    else if (roles.Contains("Participant"))
                    {
                        homeUrl = "/participant/dashboard";
                    }
                }
            }
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}